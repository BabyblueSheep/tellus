#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
#include <metal_atomic>

using namespace metal;

struct ColliderShapeData
{
    uint ColliderIndex;
    uint Type;
    float2 Center;
    float3 Fields;
};

struct type_StructuredBuffer_ColliderShapeData
{
    ColliderShapeData _m0[1];
};

struct type_RWByteAddressBuffer
{
    uint _m0[1];
};

struct type_UniformBlock
{
    uint ColliderShapeBufferOneLength;
    uint ColliderShapeBufferTwoLength;
};

kernel void main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferOne [[buffer(1)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferTwo [[buffer(2)]], device type_RWByteAddressBuffer& CollisionResultBuffer [[buffer(3)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _62;
        if (!(gl_GlobalInvocationID.x >= UniformBlock.ColliderShapeBufferOneLength))
        {
            _62 = gl_GlobalInvocationID.y >= UniformBlock.ColliderShapeBufferTwoLength;
        }
        else
        {
            _62 = true;
        }
        if (_62)
        {
            break;
        }
        ColliderShapeData _66 = ColliderShapeBufferOne._m0[gl_GlobalInvocationID.x];
        ColliderShapeData _72 = ColliderShapeBufferTwo._m0[gl_GlobalInvocationID.y];
        float2 _78 = fast::normalize(_72.Center - _66.Center);
        float _81;
        int _84;
        bool _200;
        float _80 = 0.0;
        int _83 = 0;
        for (;;)
        {
            if (_83 < 32)
            {
                float2 _89 = _66.Center + (_78 * _80);
                float _137;
                do
                {
                    float2 _92 = _89 - _66.Center;
                    if (_66.Type == 1u)
                    {
                        _137 = length(_92) - _66.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_66.Type == 2u)
                        {
                            float2 _108 = float2(cos(_66.Fields.x), sin(_66.Fields.x));
                            float2 _109 = _108 * _66.Fields.y;
                            float2 _111 = (-_108) * _66.Fields.y;
                            float2 _112 = _111 - _109;
                            float _113 = length(_112);
                            float2 _115 = _112 / float2(_113);
                            float _120 = _115.y;
                            float2 _129 = abs((_92 - ((_109 + _111) * 0.5)) * float2x2(float2(_115.x, -_120), float2(_120, _115.x))) - (float2(_113, _66.Fields.z) * 0.5);
                            _137 = length(precise::max(_129, float2(0.0))) + precise::min(precise::max(_129.x, _129.y), 0.0);
                            break;
                        }
                    }
                    _137 = 0.0;
                    break;
                } while(false);
                float _185;
                do
                {
                    float2 _140 = _89 - _72.Center;
                    if (_72.Type == 1u)
                    {
                        _185 = length(_140) - _72.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_72.Type == 2u)
                        {
                            float2 _156 = float2(cos(_72.Fields.x), sin(_72.Fields.x));
                            float2 _157 = _156 * _72.Fields.y;
                            float2 _159 = (-_156) * _72.Fields.y;
                            float2 _160 = _159 - _157;
                            float _161 = length(_160);
                            float2 _163 = _160 / float2(_161);
                            float _168 = _163.y;
                            float2 _177 = abs((_140 - ((_157 + _159) * 0.5)) * float2x2(float2(_163.x, -_168), float2(_168, _163.x))) - (float2(_161, _72.Fields.z) * 0.5);
                            _185 = length(precise::max(_177, float2(0.0))) + precise::min(precise::max(_177.x, _177.y), 0.0);
                            break;
                        }
                    }
                    _185 = 0.0;
                    break;
                } while(false);
                int _190;
                if (_137 > (-0.001000000047497451305389404296875))
                {
                    _190 = _83 + 32;
                }
                else
                {
                    _190 = _83;
                }
                if (_185 < 0.001000000047497451305389404296875)
                {
                    uint _199 = atomic_fetch_add_explicit((device atomic_uint*)&CollisionResultBuffer._m0[(((_72.ColliderIndex * 100u) + _66.ColliderIndex) * 4u) >> 2u], 1u, memory_order_relaxed);
                    _200 = true;
                    break;
                }
                _81 = _80 + _137;
                _84 = _190 + 1;
                _80 = _81;
                _83 = _84;
                continue;
            }
            else
            {
                _200 = false;
                break;
            }
        }
        if (_200)
        {
            break;
        }
        float2 _203 = fast::normalize(_66.Center - _72.Center);
        float _206;
        int _209;
        bool _325;
        float _205 = 0.0;
        int _208 = 0;
        for (;;)
        {
            if (_208 < 32)
            {
                float2 _214 = _72.Center + (_203 * _205);
                float _262;
                do
                {
                    float2 _217 = _214 - _66.Center;
                    if (_66.Type == 1u)
                    {
                        _262 = length(_217) - _66.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_66.Type == 2u)
                        {
                            float2 _233 = float2(cos(_66.Fields.x), sin(_66.Fields.x));
                            float2 _234 = _233 * _66.Fields.y;
                            float2 _236 = (-_233) * _66.Fields.y;
                            float2 _237 = _236 - _234;
                            float _238 = length(_237);
                            float2 _240 = _237 / float2(_238);
                            float _245 = _240.y;
                            float2 _254 = abs((_217 - ((_234 + _236) * 0.5)) * float2x2(float2(_240.x, -_245), float2(_245, _240.x))) - (float2(_238, _66.Fields.z) * 0.5);
                            _262 = length(precise::max(_254, float2(0.0))) + precise::min(precise::max(_254.x, _254.y), 0.0);
                            break;
                        }
                    }
                    _262 = 0.0;
                    break;
                } while(false);
                float _310;
                do
                {
                    float2 _265 = _214 - _72.Center;
                    if (_72.Type == 1u)
                    {
                        _310 = length(_265) - _72.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_72.Type == 2u)
                        {
                            float2 _281 = float2(cos(_72.Fields.x), sin(_72.Fields.x));
                            float2 _282 = _281 * _72.Fields.y;
                            float2 _284 = (-_281) * _72.Fields.y;
                            float2 _285 = _284 - _282;
                            float _286 = length(_285);
                            float2 _288 = _285 / float2(_286);
                            float _293 = _288.y;
                            float2 _302 = abs((_265 - ((_282 + _284) * 0.5)) * float2x2(float2(_288.x, -_293), float2(_293, _288.x))) - (float2(_286, _72.Fields.z) * 0.5);
                            _310 = length(precise::max(_302, float2(0.0))) + precise::min(precise::max(_302.x, _302.y), 0.0);
                            break;
                        }
                    }
                    _310 = 0.0;
                    break;
                } while(false);
                int _315;
                if (_310 > (-0.001000000047497451305389404296875))
                {
                    _315 = _208 + 32;
                }
                else
                {
                    _315 = _208;
                }
                if (_262 < 0.001000000047497451305389404296875)
                {
                    uint _324 = atomic_fetch_add_explicit((device atomic_uint*)&CollisionResultBuffer._m0[(((_72.ColliderIndex * 100u) + _66.ColliderIndex) * 4u) >> 2u], 1u, memory_order_relaxed);
                    _325 = true;
                    break;
                }
                _206 = _205 + _310;
                _209 = _315 + 1;
                _205 = _206;
                _208 = _209;
                continue;
            }
            else
            {
                _325 = _200;
                break;
            }
        }
        if (_325)
        {
            break;
        }
        break;
    } while(false);
}


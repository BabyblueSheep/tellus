#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
#include <metal_atomic>

using namespace metal;

struct VertexData
{
    float2 Position;
};

struct type_StructuredBuffer_VertexData
{
    VertexData _m0[1];
};

struct ColliderShapeData
{
    int ColliderIndex;
    int ShapeIndexRangeStart;
    int ShapeIndexRangeRangeLength;
    int Padding;
};

struct type_StructuredBuffer_ColliderShapeData
{
    ColliderShapeData _m0[1];
};

struct type_RWByteAddressBuffer
{
    uint _m0[1];
};

struct type_UniformBlock
{
    int ColliderShapeBufferOneLength;
    int ColliderShapeBufferTwoLength;
    int ColliderShapeResultBufferLength;
};

kernel void main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_VertexData& ShapeVertexBufferOne [[buffer(1)]], const device type_StructuredBuffer_VertexData& ShapeVertexBufferTwo [[buffer(2)]], const device type_StructuredBuffer_ColliderShapeData& ShapeIndexRangeBufferOne [[buffer(3)]], const device type_StructuredBuffer_ColliderShapeData& ShapeIndexRangeBufferTwo [[buffer(4)]], device type_RWByteAddressBuffer& CollisionResultBuffer [[buffer(5)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _63;
        if (!(gl_GlobalInvocationID.x >= uint(UniformBlock.ColliderShapeBufferOneLength)))
        {
            _63 = gl_GlobalInvocationID.y >= uint(UniformBlock.ColliderShapeBufferTwoLength);
        }
        else
        {
            _63 = true;
        }
        if (_63)
        {
            break;
        }
        int _79 = (ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart + ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeRangeLength) - 1;
        int _81 = (ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart + ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeRangeLength) - 1;
        bool _158;
        int _88 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart;
        for (;;)
        {
            if (_88 <= _79)
            {
                int _99;
                if (_88 == _79)
                {
                    _99 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart;
                }
                else
                {
                    _99 = _88 + 1;
                }
                float2 _106 = ShapeVertexBufferOne._m0[uint(_99)].Position - ShapeVertexBufferOne._m0[uint(_88)].Position;
                float2 _111 = fast::normalize(float2(-_106.y, _106.x));
                float _115 = dot(ShapeVertexBufferOne._m0[uint(ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart)].Position, _111);
                int _116 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart + 1;
                float _118;
                float _121;
                _118 = _115;
                _121 = _115;
                for (int _123 = _116; _123 <= _79; )
                {
                    float _130 = dot(ShapeVertexBufferOne._m0[uint(_123)].Position, _111);
                    _118 = precise::max(_118, _130);
                    _121 = precise::min(_121, _130);
                    _123++;
                    continue;
                }
                float _134 = dot(ShapeVertexBufferTwo._m0[uint(ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart)].Position, _111);
                int _135 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart + 1;
                float _137;
                float _140;
                _137 = _134;
                _140 = _134;
                for (int _142 = _135; _142 <= _81; )
                {
                    float _149 = dot(ShapeVertexBufferTwo._m0[uint(_142)].Position, _111);
                    _137 = precise::max(_137, _149);
                    _140 = precise::min(_140, _149);
                    _142++;
                    continue;
                }
                bool _154;
                if (_121 <= _137)
                {
                    _154 = _118 >= _140;
                }
                else
                {
                    _154 = false;
                }
                if (!_154)
                {
                    _158 = true;
                    break;
                }
                _88++;
                continue;
            }
            else
            {
                _158 = false;
                break;
            }
        }
        if (_158)
        {
            break;
        }
        bool _231;
        int _161 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart;
        for (;;)
        {
            if (_161 <= _81)
            {
                int _172;
                if (_161 == _81)
                {
                    _172 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart;
                }
                else
                {
                    _172 = _161 + 1;
                }
                float2 _179 = ShapeVertexBufferTwo._m0[uint(_172)].Position - ShapeVertexBufferTwo._m0[uint(_161)].Position;
                float2 _184 = fast::normalize(float2(-_179.y, _179.x));
                float _188 = dot(ShapeVertexBufferOne._m0[uint(ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart)].Position, _184);
                int _189 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart + 1;
                float _191;
                float _194;
                _191 = _188;
                _194 = _188;
                for (int _196 = _189; _196 <= _79; )
                {
                    float _203 = dot(ShapeVertexBufferOne._m0[uint(_196)].Position, _184);
                    _191 = precise::max(_191, _203);
                    _194 = precise::min(_194, _203);
                    _196++;
                    continue;
                }
                float _207 = dot(ShapeVertexBufferTwo._m0[uint(ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart)].Position, _184);
                int _208 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart + 1;
                float _210;
                float _213;
                _210 = _207;
                _213 = _207;
                for (int _215 = _208; _215 <= _81; )
                {
                    float _222 = dot(ShapeVertexBufferTwo._m0[uint(_215)].Position, _184);
                    _210 = precise::max(_210, _222);
                    _213 = precise::min(_213, _222);
                    _215++;
                    continue;
                }
                bool _227;
                if (_194 <= _210)
                {
                    _227 = _191 >= _213;
                }
                else
                {
                    _227 = false;
                }
                if (!_227)
                {
                    _231 = true;
                    break;
                }
                _161++;
                continue;
            }
            else
            {
                _231 = _158;
                break;
            }
        }
        if (_231)
        {
            break;
        }
        uint _236 = atomic_fetch_add_explicit((device atomic_uint*)&CollisionResultBuffer._m0[(uint((ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ColliderIndex * UniformBlock.ColliderShapeResultBufferLength) + ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ColliderIndex) * 4u) >> 2u], 1u, memory_order_relaxed);
        break;
    } while(false);
}


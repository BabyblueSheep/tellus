#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
#include <metal_atomic>

using namespace metal;

struct ColliderShapeData
{
    int ColliderIndex;
    uint Type;
    float2 Center;
    float3 Fields;
};

struct type_StructuredBuffer_ColliderShapeData
{
    ColliderShapeData _m0[1];
};

struct CollisionResultData
{
    int ColliderIndexOne;
    int ColliderIndexTwo;
};

struct type_AppendStructuredBuffer_CollisionResultData
{
    CollisionResultData _m0[1];
};

struct type_ACSBuffer_counter
{
    int counter;
};

struct type_UniformBlock
{
    int CollderShapeBufferOneLength;
    char _m1_pad[12];
    int CollderShapeBufferTwoLength;
};

kernel void main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferOne [[buffer(1)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferTwo [[buffer(2)]], device type_AppendStructuredBuffer_CollisionResultData& CollisionResultBuffer [[buffer(3)]], device type_ACSBuffer_counter& counter_var_CollisionResultBuffer [[buffer(4)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _62;
        if (!(gl_GlobalInvocationID.x >= uint(UniformBlock.CollderShapeBufferOneLength)))
        {
            _62 = gl_GlobalInvocationID.y >= uint(UniformBlock.CollderShapeBufferTwoLength);
        }
        else
        {
            _62 = true;
        }
        if (_62)
        {
            break;
        }
        ColliderShapeData _66 = ColliderShapeBufferOne._m0[gl_GlobalInvocationID.x];
        ColliderShapeData _72 = ColliderShapeBufferTwo._m0[gl_GlobalInvocationID.y];
        float2 _78 = fast::normalize(_72.Center - _66.Center);
        float2 _80;
        _80 = _66.Center;
        float2 _81;
        for (;;)
        {
            float _132;
            do
            {
                float2 _87 = _80 - _66.Center;
                if (_66.Type == 0u)
                {
                    _132 = length(_87) - _66.Fields.x;
                    break;
                }
                else
                {
                    if (_66.Type == 1u)
                    {
                        float2 _103 = float2(cos(_66.Fields.x), sin(_66.Fields.x));
                        float2 _104 = _103 * _66.Fields.y;
                        float2 _106 = (-_103) * _66.Fields.y;
                        float2 _107 = _106 - _104;
                        float _108 = length(_107);
                        float2 _110 = _107 / float2(_108);
                        float _115 = _110.y;
                        float2 _124 = abs((_87 - ((_104 + _106) * 0.5)) * float2x2(float2(_110.x, -_115), float2(_115, _110.x))) - (float2(_108, _66.Fields.z) * 0.5);
                        _132 = length(precise::max(_124, float2(0.0))) + precise::min(precise::max(_124.x, _124.y), 0.0);
                        break;
                    }
                }
                _132 = 0.0;
                break;
            } while(false);
            if (_132 < 0.0)
            {
                float _182;
                do
                {
                    float2 _137 = _80 - _72.Center;
                    if (_72.Type == 0u)
                    {
                        _182 = length(_137) - _72.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_72.Type == 1u)
                        {
                            float2 _153 = float2(cos(_72.Fields.x), sin(_72.Fields.x));
                            float2 _154 = _153 * _72.Fields.y;
                            float2 _156 = (-_153) * _72.Fields.y;
                            float2 _157 = _156 - _154;
                            float _158 = length(_157);
                            float2 _160 = _157 / float2(_158);
                            float _165 = _160.y;
                            float2 _174 = abs((_137 - ((_154 + _156) * 0.5)) * float2x2(float2(_160.x, -_165), float2(_165, _160.x))) - (float2(_158, _72.Fields.z) * 0.5);
                            _182 = length(precise::max(_174, float2(0.0))) + precise::min(precise::max(_174.x, _174.y), 0.0);
                            break;
                        }
                    }
                    _182 = 0.0;
                    break;
                } while(false);
                if (_182 > 0.0)
                {
                    int _187 = atomic_fetch_add_explicit((device atomic_int*)&counter_var_CollisionResultBuffer.counter, 1, memory_order_relaxed);
                    CollisionResultBuffer._m0[_187] = CollisionResultData{ _66.ColliderIndex, _72.ColliderIndex };
                }
                _81 = _80 + (_78 * _182);
                _80 = _81;
                continue;
            }
            else
            {
                break;
            }
        }
        break;
    } while(false);
}


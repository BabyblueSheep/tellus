#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

// Returns 2D texture coords corresponding to 1D texel buffer coords
static inline __attribute__((always_inline))
uint2 spvTexelBufferCoord(uint tc)
{
    return uint2(tc % 4096, tc / 4096);
}

struct ColliderShapeData
{
    int ColliderIndex;
    int ShapeIndexRangeStart;
    int ShapeIndexRangeRangeLength;
};

struct type_StructuredBuffer_ColliderShapeData
{
    ColliderShapeData _m0[1];
};

struct type_RWByteAddressBuffer
{
    uint _m0[1];
};

struct type_UniformBlock
{
    int ColliderShapeBufferOneLength;
    int ColliderShapeBufferTwoLength;
    int ColliderShapeResultBufferLength;
};

kernel void main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_ColliderShapeData& ShapeIndexRangeBufferOne [[buffer(1)]], const device type_StructuredBuffer_ColliderShapeData& ShapeIndexRangeBufferTwo [[buffer(2)]], device type_RWByteAddressBuffer& CollisionResultBuffer [[buffer(3)]], texture2d<float> ShapeVertexBufferOne [[texture(0)]], texture2d<float> ShapeVertexBufferTwo [[texture(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _62;
        if (!(gl_GlobalInvocationID.x >= uint(UniformBlock.ColliderShapeBufferOneLength)))
        {
            _62 = gl_GlobalInvocationID.y >= uint(UniformBlock.ColliderShapeBufferTwoLength);
        }
        else
        {
            _62 = true;
        }
        if (_62)
        {
            break;
        }
        int _76 = (ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart + ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeRangeLength) - 1;
        int _78 = (ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart + ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeRangeLength) - 1;
        bool _154;
        int _80 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart;
        for (;;)
        {
            if (_80 <= _76)
            {
                int _91;
                if (_80 == _76)
                {
                    _91 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart;
                }
                else
                {
                    _91 = _80 + 1;
                }
                float2 _100 = ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_91))).xy - ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_80))).xy;
                float2 _105 = fast::normalize(float2(-_100.y, _100.x));
                float _110 = dot(ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart))).xy, _105);
                int _111 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart + 1;
                float _113;
                float _116;
                _113 = _110;
                _116 = _110;
                for (int _118 = _111; _118 <= _76; )
                {
                    float _125 = dot(ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_118))).xy, _105);
                    _113 = precise::max(_113, _125);
                    _116 = precise::min(_116, _125);
                    _118++;
                    continue;
                }
                float _130 = dot(ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart))).xy, _105);
                int _131 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart + 1;
                float _133;
                float _136;
                _133 = _130;
                _136 = _130;
                for (int _138 = _131; _138 <= _78; )
                {
                    float _145 = dot(ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_138))).xy, _105);
                    _133 = precise::max(_133, _145);
                    _136 = precise::min(_136, _145);
                    _138++;
                    continue;
                }
                bool _150;
                if (_116 <= _133)
                {
                    _150 = _113 >= _136;
                }
                else
                {
                    _150 = false;
                }
                if (!_150)
                {
                    _154 = true;
                    break;
                }
                _80++;
                continue;
            }
            else
            {
                _154 = false;
                break;
            }
        }
        if (_154)
        {
            break;
        }
        bool _231;
        int _157 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart;
        for (;;)
        {
            if (_157 <= _78)
            {
                int _168;
                if (_157 == _78)
                {
                    _168 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart;
                }
                else
                {
                    _168 = _157 + 1;
                }
                float2 _177 = ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_168))).xy - ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_157))).xy;
                float2 _182 = fast::normalize(float2(-_177.y, _177.x));
                float _187 = dot(ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart))).xy, _182);
                int _188 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart + 1;
                float _190;
                float _193;
                _190 = _187;
                _193 = _187;
                for (int _195 = _188; _195 <= _76; )
                {
                    float _202 = dot(ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_195))).xy, _182);
                    _190 = precise::max(_190, _202);
                    _193 = precise::min(_193, _202);
                    _195++;
                    continue;
                }
                float _207 = dot(ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart))).xy, _182);
                int _208 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart + 1;
                float _210;
                float _213;
                _210 = _207;
                _213 = _207;
                for (int _215 = _208; _215 <= _78; )
                {
                    float _222 = dot(ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_215))).xy, _182);
                    _210 = precise::max(_210, _222);
                    _213 = precise::min(_213, _222);
                    _215++;
                    continue;
                }
                bool _227;
                if (_193 <= _210)
                {
                    _227 = _190 >= _213;
                }
                else
                {
                    _227 = false;
                }
                if (!_227)
                {
                    _231 = true;
                    break;
                }
                _157++;
                continue;
            }
            else
            {
                _231 = _154;
                break;
            }
        }
        if (_231)
        {
            break;
        }
        CollisionResultBuffer._m0[(uint((ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ColliderIndex * UniformBlock.ColliderShapeResultBufferLength) + ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ColliderIndex) * 4u) >> 2u] = 5u;
        break;
    } while(false);
}


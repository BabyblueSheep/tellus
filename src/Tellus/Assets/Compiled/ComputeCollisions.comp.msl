#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

// Returns 2D texture coords corresponding to 1D texel buffer coords
static inline __attribute__((always_inline))
uint2 spvTexelBufferCoord(uint tc)
{
    return uint2(tc % 4096, tc / 4096);
}

struct ColliderShapeData
{
    int ColliderIndex;
    int ShapeIndexRangeStart;
    int ShapeIndexRangeRangeLength;
    int Padding;
};

struct type_StructuredBuffer_ColliderShapeData
{
    ColliderShapeData _m0[1];
};

struct type_RWByteAddressBuffer
{
    uint _m0[1];
};

struct type_UniformBlock
{
    int ColliderShapeBufferOneLength;
    int ColliderShapeBufferTwoLength;
    int ColliderShapeResultBufferLength;
};

kernel void main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_ColliderShapeData& ShapeIndexRangeBufferOne [[buffer(1)]], const device type_StructuredBuffer_ColliderShapeData& ShapeIndexRangeBufferTwo [[buffer(2)]], device type_RWByteAddressBuffer& CollisionResultBuffer [[buffer(3)]], texture2d<float> ShapeVertexBufferOne [[texture(0)]], texture2d<float> ShapeVertexBufferTwo [[texture(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _63;
        if (!(gl_GlobalInvocationID.x >= uint(UniformBlock.ColliderShapeBufferOneLength)))
        {
            _63 = gl_GlobalInvocationID.y >= uint(UniformBlock.ColliderShapeBufferTwoLength);
        }
        else
        {
            _63 = true;
        }
        if (_63)
        {
            break;
        }
        int _67 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ColliderIndex;
        int _69 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeStart;
        int _71 = ShapeIndexRangeBufferOne._m0[gl_GlobalInvocationID.x].ShapeIndexRangeRangeLength;
        int _73 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ColliderIndex;
        int _75 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeStart;
        int _77 = ShapeIndexRangeBufferTwo._m0[gl_GlobalInvocationID.y].ShapeIndexRangeRangeLength;
        int _79 = (_69 + _71) - 1;
        int _81 = (_75 + _77) - 1;
        uint _86 = uint((_73 * UniformBlock.ColliderShapeResultBufferLength) + _67);
        bool _165;
        int _88 = _69;
        for (;;)
        {
            if (_88 <= _79)
            {
                int _99;
                if (_88 == _79)
                {
                    _99 = _69;
                }
                else
                {
                    _99 = _88 + 1;
                }
                uint _100 = uint(_88);
                float2 _108 = ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_99))).xy - ShapeVertexBufferOne.read(spvTexelBufferCoord(_100)).xy;
                float2 _113 = fast::normalize(float2(-_108.y, _108.x));
                float _118 = dot(ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_69))).xy, _113);
                int _119 = _69 + 1;
                float _121;
                float _124;
                _121 = _118;
                _124 = _118;
                for (int _126 = _119; _126 <= _79; )
                {
                    float _133 = dot(ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_126))).xy, _113);
                    _121 = precise::max(_121, _133);
                    _124 = precise::min(_124, _133);
                    _126++;
                    continue;
                }
                float _138 = dot(ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_75))).xy, _113);
                int _139 = _75 + 1;
                float _141;
                float _144;
                _141 = _138;
                _144 = _138;
                for (int _146 = _139; _146 <= _81; )
                {
                    float _153 = dot(ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_146))).xy, _113);
                    _141 = precise::max(_141, _153);
                    _144 = precise::min(_144, _153);
                    _146++;
                    continue;
                }
                bool _158;
                if (_124 <= _141)
                {
                    _158 = _121 >= _144;
                }
                else
                {
                    _158 = false;
                }
                if (!_158)
                {
                    CollisionResultBuffer._m0[(_86 * 4u) >> 2u] = _100;
                    _165 = true;
                    break;
                }
                _88++;
                continue;
            }
            else
            {
                _165 = false;
                break;
            }
        }
        if (_165)
        {
            break;
        }
        bool _245;
        int _168 = _75;
        for (;;)
        {
            if (_168 <= _81)
            {
                int _179;
                if (_168 == _81)
                {
                    _179 = _75;
                }
                else
                {
                    _179 = _168 + 1;
                }
                float2 _188 = ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_179))).xy - ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_168))).xy;
                float2 _193 = fast::normalize(float2(-_188.y, _188.x));
                float _198 = dot(ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_69))).xy, _193);
                int _199 = _69 + 1;
                float _201;
                float _204;
                _201 = _198;
                _204 = _198;
                for (int _206 = _199; _206 <= _79; )
                {
                    float _213 = dot(ShapeVertexBufferOne.read(spvTexelBufferCoord(uint(_206))).xy, _193);
                    _201 = precise::max(_201, _213);
                    _204 = precise::min(_204, _213);
                    _206++;
                    continue;
                }
                float _218 = dot(ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_75))).xy, _193);
                int _219 = _75 + 1;
                float _221;
                float _224;
                _221 = _218;
                _224 = _218;
                for (int _226 = _219; _226 <= _81; )
                {
                    float _233 = dot(ShapeVertexBufferTwo.read(spvTexelBufferCoord(uint(_226))).xy, _193);
                    _221 = precise::max(_221, _233);
                    _224 = precise::min(_224, _233);
                    _226++;
                    continue;
                }
                bool _238;
                if (_204 <= _221)
                {
                    _238 = _201 >= _224;
                }
                else
                {
                    _238 = false;
                }
                if (!_238)
                {
                    CollisionResultBuffer._m0[(_86 * 4u) >> 2u] = 3u;
                    _245 = true;
                    break;
                }
                _168++;
                continue;
            }
            else
            {
                _245 = _165;
                break;
            }
        }
        if (_245)
        {
            break;
        }
        CollisionResultBuffer._m0[(_86 * 4u) >> 2u] = 5u;
        break;
    } while(false);
}


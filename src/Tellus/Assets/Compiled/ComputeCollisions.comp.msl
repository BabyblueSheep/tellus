#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct ColliderShapeData
{
    uint ColliderIndex;
    uint Type;
    float2 Center;
    float3 Fields;
};

struct type_StructuredBuffer_ColliderShapeData
{
    ColliderShapeData _m0[1];
};

struct type_RWByteAddressBuffer
{
    uint _m0[1];
};

struct type_UniformBlock
{
    uint ColliderShapeBufferOneLength;
    uint ColliderShapeBufferTwoLength;
};

kernel void main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferOne [[buffer(1)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferTwo [[buffer(2)]], device type_RWByteAddressBuffer& CollisionResultBuffer [[buffer(3)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _61;
        if (!(gl_GlobalInvocationID.x >= UniformBlock.ColliderShapeBufferOneLength))
        {
            _61 = gl_GlobalInvocationID.y >= UniformBlock.ColliderShapeBufferTwoLength;
        }
        else
        {
            _61 = true;
        }
        if (_61)
        {
            break;
        }
        ColliderShapeData _65 = ColliderShapeBufferOne._m0[gl_GlobalInvocationID.x];
        ColliderShapeData _71 = ColliderShapeBufferTwo._m0[gl_GlobalInvocationID.y];
        float2 _77 = fast::normalize(_71.Center - _65.Center);
        float2 _79;
        _79 = _65.Center;
        float2 _80;
        int _83;
        bool _195;
        int _82 = 0;
        for (;;)
        {
            if (_82 < 32)
            {
                float _134;
                do
                {
                    float2 _89 = _79 - _65.Center;
                    if (_65.Type == 0u)
                    {
                        _134 = length(_89) - _65.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_65.Type == 1u)
                        {
                            float2 _105 = float2(cos(_65.Fields.x), sin(_65.Fields.x));
                            float2 _106 = _105 * _65.Fields.y;
                            float2 _108 = (-_105) * _65.Fields.y;
                            float2 _109 = _108 - _106;
                            float _110 = length(_109);
                            float2 _112 = _109 / float2(_110);
                            float _117 = _112.y;
                            float2 _126 = abs((_89 - ((_106 + _108) * 0.5)) * float2x2(float2(_112.x, -_117), float2(_117, _112.x))) - (float2(_110, _65.Fields.z) * 0.5);
                            _134 = length(precise::max(_126, float2(0.0))) + precise::min(precise::max(_126.x, _126.y), 0.0);
                            break;
                        }
                    }
                    _134 = 0.0;
                    break;
                } while(false);
                float _182;
                do
                {
                    float2 _137 = _79 - _71.Center;
                    if (_71.Type == 0u)
                    {
                        _182 = length(_137) - _71.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_71.Type == 1u)
                        {
                            float2 _153 = float2(cos(_71.Fields.x), sin(_71.Fields.x));
                            float2 _154 = _153 * _71.Fields.y;
                            float2 _156 = (-_153) * _71.Fields.y;
                            float2 _157 = _156 - _154;
                            float _158 = length(_157);
                            float2 _160 = _157 / float2(_158);
                            float _165 = _160.y;
                            float2 _174 = abs((_137 - ((_154 + _156) * 0.5)) * float2x2(float2(_160.x, -_165), float2(_165, _160.x))) - (float2(_158, _71.Fields.z) * 0.5);
                            _182 = length(precise::max(_174, float2(0.0))) + precise::min(precise::max(_174.x, _174.y), 0.0);
                            break;
                        }
                    }
                    _182 = 0.0;
                    break;
                } while(false);
                if (_134 >= 0.001000000047497451305389404296875)
                {
                    _195 = false;
                    break;
                }
                if (_182 <= 0.001000000047497451305389404296875)
                {
                    CollisionResultBuffer._m0[(((_71.ColliderIndex * 100u) + _65.ColliderIndex) * 4u) >> 2u] = 1u;
                    _195 = true;
                    break;
                }
                _80 = _79 + (_77 * _182);
                _83 = _82 + 1;
                _79 = _80;
                _82 = _83;
                continue;
            }
            else
            {
                _195 = false;
                break;
            }
        }
        if (_195)
        {
            break;
        }
        float2 _198 = fast::normalize(_65.Center - _71.Center);
        float2 _200;
        _200 = _71.Center;
        float2 _201;
        int _204;
        bool _316;
        int _203 = 0;
        for (;;)
        {
            if (_203 < 32)
            {
                float _255;
                do
                {
                    float2 _210 = _200 - _65.Center;
                    if (_65.Type == 0u)
                    {
                        _255 = length(_210) - _65.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_65.Type == 1u)
                        {
                            float2 _226 = float2(cos(_65.Fields.x), sin(_65.Fields.x));
                            float2 _227 = _226 * _65.Fields.y;
                            float2 _229 = (-_226) * _65.Fields.y;
                            float2 _230 = _229 - _227;
                            float _231 = length(_230);
                            float2 _233 = _230 / float2(_231);
                            float _238 = _233.y;
                            float2 _247 = abs((_210 - ((_227 + _229) * 0.5)) * float2x2(float2(_233.x, -_238), float2(_238, _233.x))) - (float2(_231, _65.Fields.z) * 0.5);
                            _255 = length(precise::max(_247, float2(0.0))) + precise::min(precise::max(_247.x, _247.y), 0.0);
                            break;
                        }
                    }
                    _255 = 0.0;
                    break;
                } while(false);
                float _303;
                do
                {
                    float2 _258 = _200 - _71.Center;
                    if (_71.Type == 0u)
                    {
                        _303 = length(_258) - _71.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_71.Type == 1u)
                        {
                            float2 _274 = float2(cos(_71.Fields.x), sin(_71.Fields.x));
                            float2 _275 = _274 * _71.Fields.y;
                            float2 _277 = (-_274) * _71.Fields.y;
                            float2 _278 = _277 - _275;
                            float _279 = length(_278);
                            float2 _281 = _278 / float2(_279);
                            float _286 = _281.y;
                            float2 _295 = abs((_258 - ((_275 + _277) * 0.5)) * float2x2(float2(_281.x, -_286), float2(_286, _281.x))) - (float2(_279, _71.Fields.z) * 0.5);
                            _303 = length(precise::max(_295, float2(0.0))) + precise::min(precise::max(_295.x, _295.y), 0.0);
                            break;
                        }
                    }
                    _303 = 0.0;
                    break;
                } while(false);
                if (_303 >= 0.001000000047497451305389404296875)
                {
                    _316 = _195;
                    break;
                }
                if (_255 <= 0.001000000047497451305389404296875)
                {
                    CollisionResultBuffer._m0[(((_71.ColliderIndex * 100u) + _65.ColliderIndex) * 4u) >> 2u] = 1u;
                    _316 = true;
                    break;
                }
                _201 = _200 + (_198 * _255);
                _204 = _203 + 1;
                _200 = _201;
                _203 = _204;
                continue;
            }
            else
            {
                _316 = _195;
                break;
            }
        }
        if (_316)
        {
            break;
        }
        break;
    } while(false);
}


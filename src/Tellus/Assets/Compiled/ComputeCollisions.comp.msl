#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
#include <metal_atomic>

using namespace metal;

struct ColliderShapeData
{
    uint ColliderIndex;
    uint Type;
    float2 Center;
    float3 Fields;
};

struct type_StructuredBuffer_ColliderShapeData
{
    ColliderShapeData _m0[1];
};

struct type_RWByteAddressBuffer
{
    uint _m0[1];
};

struct type_UniformBlock
{
    uint ColliderShapeBufferOneLength;
    uint ColliderShapeBufferTwoLength;
};

kernel void main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferOne [[buffer(1)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferTwo [[buffer(2)]], device type_RWByteAddressBuffer& CollisionResultBuffer [[buffer(3)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _63;
        if (!(gl_GlobalInvocationID.x >= UniformBlock.ColliderShapeBufferOneLength))
        {
            _63 = gl_GlobalInvocationID.y >= UniformBlock.ColliderShapeBufferTwoLength;
        }
        else
        {
            _63 = true;
        }
        if (_63)
        {
            break;
        }
        ColliderShapeData _67 = ColliderShapeBufferOne._m0[gl_GlobalInvocationID.x];
        ColliderShapeData _73 = ColliderShapeBufferTwo._m0[gl_GlobalInvocationID.y];
        float2 _79 = fast::normalize(_73.Center - _67.Center);
        float _82;
        int _85;
        bool _202;
        float _81 = 0.0;
        int _84 = 0;
        for (;;)
        {
            if (_84 < 32)
            {
                float2 _90 = _67.Center + (_79 * _81);
                float _138;
                do
                {
                    float2 _93 = _90 - _67.Center;
                    if (_67.Type == 1u)
                    {
                        _138 = length(_93) - _67.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_67.Type == 2u)
                        {
                            float2 _109 = float2(cos(_67.Fields.x), sin(_67.Fields.x));
                            float2 _110 = _109 * _67.Fields.y;
                            float2 _112 = (-_109) * _67.Fields.y;
                            float2 _113 = _112 - _110;
                            float _114 = length(_113);
                            float2 _116 = _113 / float2(_114);
                            float _121 = _116.y;
                            float2 _130 = abs((_93 - ((_110 + _112) * 0.5)) * float2x2(float2(_116.x, -_121), float2(_121, _116.x))) - (float2(_114, _67.Fields.z) * 0.5);
                            _138 = length(precise::max(_130, float2(0.0))) + precise::min(precise::max(_130.x, _130.y), 0.0);
                            break;
                        }
                    }
                    _138 = 0.0;
                    break;
                } while(false);
                float _186;
                do
                {
                    float2 _141 = _90 - _73.Center;
                    if (_73.Type == 1u)
                    {
                        _186 = length(_141) - _73.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_73.Type == 2u)
                        {
                            float2 _157 = float2(cos(_73.Fields.x), sin(_73.Fields.x));
                            float2 _158 = _157 * _73.Fields.y;
                            float2 _160 = (-_157) * _73.Fields.y;
                            float2 _161 = _160 - _158;
                            float _162 = length(_161);
                            float2 _164 = _161 / float2(_162);
                            float _169 = _164.y;
                            float2 _178 = abs((_141 - ((_158 + _160) * 0.5)) * float2x2(float2(_164.x, -_169), float2(_169, _164.x))) - (float2(_162, _73.Fields.z) * 0.5);
                            _186 = length(precise::max(_178, float2(0.0))) + precise::min(precise::max(_178.x, _178.y), 0.0);
                            break;
                        }
                    }
                    _186 = 0.0;
                    break;
                } while(false);
                int _191;
                if (_138 > (-0.001000000047497451305389404296875))
                {
                    _191 = _84 + 32;
                }
                else
                {
                    _191 = _84;
                }
                if (_186 < 0.001000000047497451305389404296875)
                {
                    uint _200 = atomic_fetch_add_explicit((device atomic_uint*)&CollisionResultBuffer._m0[(((_73.ColliderIndex * 100u) + _67.ColliderIndex) * 4u) >> 2u], 1u, memory_order_relaxed);
                    _202 = true;
                    break;
                }
                _82 = _81 + (_138 * (-1.0));
                _85 = _191 + 1;
                _81 = _82;
                _84 = _85;
                continue;
            }
            else
            {
                _202 = false;
                break;
            }
        }
        if (_202)
        {
            break;
        }
        float2 _205 = fast::normalize(_67.Center - _73.Center);
        float _208;
        int _211;
        bool _328;
        float _207 = 0.0;
        int _210 = 0;
        for (;;)
        {
            if (_210 < 32)
            {
                float2 _216 = _73.Center + (_205 * _207);
                float _264;
                do
                {
                    float2 _219 = _216 - _67.Center;
                    if (_67.Type == 1u)
                    {
                        _264 = length(_219) - _67.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_67.Type == 2u)
                        {
                            float2 _235 = float2(cos(_67.Fields.x), sin(_67.Fields.x));
                            float2 _236 = _235 * _67.Fields.y;
                            float2 _238 = (-_235) * _67.Fields.y;
                            float2 _239 = _238 - _236;
                            float _240 = length(_239);
                            float2 _242 = _239 / float2(_240);
                            float _247 = _242.y;
                            float2 _256 = abs((_219 - ((_236 + _238) * 0.5)) * float2x2(float2(_242.x, -_247), float2(_247, _242.x))) - (float2(_240, _67.Fields.z) * 0.5);
                            _264 = length(precise::max(_256, float2(0.0))) + precise::min(precise::max(_256.x, _256.y), 0.0);
                            break;
                        }
                    }
                    _264 = 0.0;
                    break;
                } while(false);
                float _312;
                do
                {
                    float2 _267 = _216 - _73.Center;
                    if (_73.Type == 1u)
                    {
                        _312 = length(_267) - _73.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_73.Type == 2u)
                        {
                            float2 _283 = float2(cos(_73.Fields.x), sin(_73.Fields.x));
                            float2 _284 = _283 * _73.Fields.y;
                            float2 _286 = (-_283) * _73.Fields.y;
                            float2 _287 = _286 - _284;
                            float _288 = length(_287);
                            float2 _290 = _287 / float2(_288);
                            float _295 = _290.y;
                            float2 _304 = abs((_267 - ((_284 + _286) * 0.5)) * float2x2(float2(_290.x, -_295), float2(_295, _290.x))) - (float2(_288, _73.Fields.z) * 0.5);
                            _312 = length(precise::max(_304, float2(0.0))) + precise::min(precise::max(_304.x, _304.y), 0.0);
                            break;
                        }
                    }
                    _312 = 0.0;
                    break;
                } while(false);
                int _317;
                if (_312 > (-0.001000000047497451305389404296875))
                {
                    _317 = _210 + 32;
                }
                else
                {
                    _317 = _210;
                }
                if (_264 < 0.001000000047497451305389404296875)
                {
                    uint _326 = atomic_fetch_add_explicit((device atomic_uint*)&CollisionResultBuffer._m0[(((_73.ColliderIndex * 100u) + _67.ColliderIndex) * 4u) >> 2u], 1u, memory_order_relaxed);
                    _328 = true;
                    break;
                }
                _208 = _207 + (_312 * (-1.0));
                _211 = _317 + 1;
                _207 = _208;
                _210 = _211;
                continue;
            }
            else
            {
                _328 = _202;
                break;
            }
        }
        if (_328)
        {
            break;
        }
        break;
    } while(false);
}


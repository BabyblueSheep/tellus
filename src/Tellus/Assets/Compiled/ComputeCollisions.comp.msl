#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
#include <metal_atomic>

using namespace metal;

struct ColliderShapeData
{
    int ColliderIndex;
    uint Type;
    float2 Center;
    float3 Fields;
};

struct type_StructuredBuffer_ColliderShapeData
{
    ColliderShapeData _m0[1];
};

struct type_RWByteAddressBuffer
{
    uint _m0[1];
};

struct type_UniformBlock
{
    int CollderShapeBufferOneLength;
    char _m1_pad[12];
    int CollderShapeBufferTwoLength;
};

kernel void main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferOne [[buffer(1)]], const device type_StructuredBuffer_ColliderShapeData& ColliderShapeBufferTwo [[buffer(2)]], device type_RWByteAddressBuffer& CollisionResultOneBuffer [[buffer(3)]], device type_RWByteAddressBuffer& CollisionResultTwoBuffer [[buffer(4)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    threadgroup uint collisionResultBufferIndex;
    do
    {
        bool _56;
        if (gl_GlobalInvocationID.x == 0u)
        {
            _56 = gl_GlobalInvocationID.y == 0u;
        }
        else
        {
            _56 = false;
        }
        if (_56)
        {
            collisionResultBufferIndex = 0u;
        }
        bool _70;
        if (!(gl_GlobalInvocationID.x >= uint(UniformBlock.CollderShapeBufferOneLength)))
        {
            _70 = gl_GlobalInvocationID.y >= uint(UniformBlock.CollderShapeBufferTwoLength);
        }
        else
        {
            _70 = true;
        }
        if (_70)
        {
            break;
        }
        ColliderShapeData _74 = ColliderShapeBufferOne._m0[gl_GlobalInvocationID.x];
        ColliderShapeData _80 = ColliderShapeBufferTwo._m0[gl_GlobalInvocationID.y];
        float2 _86 = fast::normalize(_80.Center - _74.Center);
        float2 _88;
        _88 = _74.Center;
        float2 _89;
        bool _206;
        for (;;)
        {
            float _140;
            do
            {
                float2 _95 = _88 - _74.Center;
                if (_74.Type == 0u)
                {
                    _140 = length(_95) - _74.Fields.x;
                    break;
                }
                else
                {
                    if (_74.Type == 1u)
                    {
                        float2 _111 = float2(cos(_74.Fields.x), sin(_74.Fields.x));
                        float2 _112 = _111 * _74.Fields.y;
                        float2 _114 = (-_111) * _74.Fields.y;
                        float2 _115 = _114 - _112;
                        float _116 = length(_115);
                        float2 _118 = _115 / float2(_116);
                        float _123 = _118.y;
                        float2 _132 = abs((_95 - ((_112 + _114) * 0.5)) * float2x2(float2(_118.x, -_123), float2(_123, _118.x))) - (float2(_116, _74.Fields.z) * 0.5);
                        _140 = length(precise::max(_132, float2(0.0))) + precise::min(precise::max(_132.x, _132.y), 0.0);
                        break;
                    }
                }
                _140 = 0.0;
                break;
            } while(false);
            if (_140 < 0.0)
            {
                float _190;
                do
                {
                    float2 _145 = _88 - _80.Center;
                    if (_80.Type == 0u)
                    {
                        _190 = length(_145) - _80.Fields.x;
                        break;
                    }
                    else
                    {
                        if (_80.Type == 1u)
                        {
                            float2 _161 = float2(cos(_80.Fields.x), sin(_80.Fields.x));
                            float2 _162 = _161 * _80.Fields.y;
                            float2 _164 = (-_161) * _80.Fields.y;
                            float2 _165 = _164 - _162;
                            float _166 = length(_165);
                            float2 _168 = _165 / float2(_166);
                            float _173 = _168.y;
                            float2 _182 = abs((_145 - ((_162 + _164) * 0.5)) * float2x2(float2(_168.x, -_173), float2(_173, _168.x))) - (float2(_166, _80.Fields.z) * 0.5);
                            _190 = length(precise::max(_182, float2(0.0))) + precise::min(precise::max(_182.x, _182.y), 0.0);
                            break;
                        }
                    }
                    _190 = 0.0;
                    break;
                } while(false);
                if (_190 < 0.0)
                {
                    uint _198 = atomic_fetch_add_explicit((device atomic_uint*)&CollisionResultOneBuffer._m0[collisionResultBufferIndex >> 2u], uint(_74.ColliderIndex), memory_order_relaxed);
                    uint _203 = atomic_fetch_add_explicit((device atomic_uint*)&CollisionResultTwoBuffer._m0[collisionResultBufferIndex >> 2u], uint(_80.ColliderIndex), memory_order_relaxed);
                    uint _204 = atomic_fetch_add_explicit((threadgroup atomic_uint*)&collisionResultBufferIndex, 1u, memory_order_relaxed);
                    _206 = true;
                    break;
                }
                _89 = _88 + (_86 * _190);
                _88 = _89;
                continue;
            }
            else
            {
                _206 = false;
                break;
            }
        }
        if (_206)
        {
            break;
        }
        break;
    } while(false);
}

